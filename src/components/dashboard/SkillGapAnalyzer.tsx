
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Calendar, Clock } from "lucide-react";
import { toast } from "sonner";

const SkillGapAnalyzer = () => {
  const [query, setQuery] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [skillPlan, setSkillPlan] = useState<{
    targetSkill: string;
    timeframe: string;
    currentLevel: number;
    targetLevel: number;
    steps: Array<{
      title: string;
      description: string;
      duration: string;
      resources: Array<{
        type: string;
        title: string;
        link: string;
        duration?: string;
      }>;
    }>;
  } | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!query.trim()) {
      toast.error("Please enter a skill gap query");
      return;
    }
    
    setIsLoading(true);
    
    try {
      // This would be replaced with an actual LLM API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Mock data - would be generated by LLM
      setSkillPlan({
        targetSkill: "Generative AI",
        timeframe: "2 weeks",
        currentLevel: 1,
        targetLevel: 7,
        steps: [
          {
            title: "Foundation Knowledge",
            description: "Learn the basic concepts and principles of generative AI models including transformers, diffusion models, and GANs.",
            duration: "3 days",
            resources: [
              {
                type: "Course",
                title: "Introduction to Generative AI",
                link: "https://example.com/course",
                duration: "4 hours"
              },
              {
                type: "Article",
                title: "Understanding Different Types of Generative Models",
                link: "https://example.com/article",
                duration: "30 minutes"
              },
              {
                type: "Video",
                title: "How Generative AI Works",
                link: "https://example.com/video",
                duration: "45 minutes"
              }
            ]
          },
          {
            title: "Practical Applications",
            description: "Learn how to use popular generative AI tools and platforms for practical business applications.",
            duration: "4 days",
            resources: [
              {
                type: "Workshop",
                title: "Hands-on with GPT Models",
                link: "https://example.com/workshop",
                duration: "3 hours"
              },
              {
                type: "Tutorial",
                title: "Building Applications with Generative AI APIs",
                link: "https://example.com/tutorial",
                duration: "2 hours"
              },
              {
                type: "Project",
                title: "Create a Simple AI Content Generator",
                link: "https://example.com/project",
                duration: "8 hours"
              }
            ]
          },
          {
            title: "Business Implementation",
            description: "Learn how to integrate generative AI into business workflows and product development processes.",
            duration: "5 days",
            resources: [
              {
                type: "Case Study",
                title: "How Top Companies Use Generative AI",
                link: "https://example.com/casestudy",
                duration: "1 hour"
              },
              {
                type: "Course",
                title: "Generative AI for Product Managers",
                link: "https://example.com/course2",
                duration: "6 hours"
              },
              {
                type: "Project",
                title: "Design a Generative AI Integration Strategy",
                link: "https://example.com/project2",
                duration: "10 hours"
              }
            ]
          },
          {
            title: "Ethical Considerations",
            description: "Understand the ethical implications and best practices for responsible generative AI use.",
            duration: "2 days",
            resources: [
              {
                type: "Webinar",
                title: "Ethics in Generative AI",
                link: "https://example.com/webinar",
                duration: "90 minutes"
              },
              {
                type: "Guide",
                title: "Responsible AI Implementation Framework",
                link: "https://example.com/guide",
                duration: "2 hours"
              }
            ]
          }
        ]
      });
      
      toast.success("Skill plan generated!");
    } catch (error) {
      toast.error("Failed to generate skill plan. Please try again.");
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <form onSubmit={handleSubmit} className="flex gap-2">
        <Input
          placeholder="e.g., My profile lacks 'Generative AI' skills—need a 2-week upskilling plan"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          className="flex-1"
        />
        <Button type="submit" disabled={isLoading}>
          {isLoading ? "Analyzing..." : <Search className="mr-2" />}
          {isLoading ? "" : "Analyze"}
        </Button>
      </form>

      {skillPlan && (
        <div className="mt-6 space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-xl font-bold">{skillPlan.targetSkill} Upskilling Plan</h3>
              <p className="text-muted-foreground flex items-center gap-1 mt-1">
                <Calendar size={16} />
                {skillPlan.timeframe} timeframe
              </p>
            </div>
            <div className="bg-muted p-4 rounded-lg text-center">
              <div className="text-2xl font-bold">{skillPlan.currentLevel} → {skillPlan.targetLevel}</div>
              <div className="text-xs text-muted-foreground">Skill Level</div>
            </div>
          </div>
          
          <div className="space-y-6">
            {skillPlan.steps.map((step, index) => (
              <div key={index} className="border rounded-lg p-4">
                <div className="flex justify-between items-start">
                  <h4 className="text-lg font-semibold">
                    {index + 1}. {step.title}
                  </h4>
                  <span className="bg-primary/10 text-primary text-xs px-2 py-1 rounded-full flex items-center gap-1">
                    <Clock size={12} />
                    {step.duration}
                  </span>
                </div>
                <p className="text-muted-foreground mt-2">{step.description}</p>
                
                <div className="mt-4 space-y-3">
                  <h5 className="font-medium text-sm">Recommended Resources:</h5>
                  <div className="grid gap-3 sm:grid-cols-2">
                    {step.resources.map((resource, i) => (
                      <div key={i} className="border rounded-md p-3 bg-card">
                        <div className="flex justify-between">
                          <span className="text-xs bg-secondary px-2 py-0.5 rounded-full">
                            {resource.type}
                          </span>
                          {resource.duration && (
                            <span className="text-xs text-muted-foreground">
                              {resource.duration}
                            </span>
                          )}
                        </div>
                        <h6 className="font-medium mt-1">{resource.title}</h6>
                        <a 
                          href={resource.link} 
                          className="text-xs text-primary hover:underline mt-1 block"
                          target="_blank" 
                          rel="noopener noreferrer"
                        >
                          View Resource
                        </a>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default SkillGapAnalyzer;
