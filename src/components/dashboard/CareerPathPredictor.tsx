
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search } from "lucide-react";
import { toast } from "sonner";

const CareerPathPredictor = () => {
  const [query, setQuery] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [roadmap, setRoadmap] = useState<{
    title: string;
    steps: Array<{
      year: number;
      title: string;
      description: string;
      skills: string[];
    }>;
  } | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!query.trim()) {
      toast.error("Please enter a career path query");
      return;
    }
    
    setIsLoading(true);
    
    try {
      // This would be replaced with an actual LLM API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Mock data - would be generated by LLM
      setRoadmap({
        title: "Path to CTO in 5 Years",
        steps: [
          {
            year: 1,
            title: "Senior Developer to Team Lead",
            description: "Focus on leadership skills while maintaining technical expertise. Lead small teams on projects and mentor junior developers.",
            skills: ["Leadership", "Technical mentoring", "Project management"]
          },
          {
            year: 2,
            title: "Engineering Manager",
            description: "Oversee multiple teams and be responsible for technical direction. Start focusing on cross-departmental collaboration.",
            skills: ["People management", "Technical strategy", "Cross-team collaboration"]
          },
          {
            year: 3,
            title: "Director of Engineering",
            description: "Develop broader technical vision and manage engineering department budget and resources.",
            skills: ["Technical vision", "Resource allocation", "Budget management"]
          },
          {
            year: 4,
            title: "VP of Engineering",
            description: "Take on company-wide technical leadership and represent engineering in executive discussions.",
            skills: ["Executive communication", "Strategic planning", "Technology roadmapping"]
          },
          {
            year: 5,
            title: "Chief Technology Officer",
            description: "Lead the overall technology strategy and innovation direction for the company.",
            skills: ["Technology innovation", "Executive leadership", "Business strategy"]
          }
        ]
      });
      
      toast.success("Career roadmap generated!");
    } catch (error) {
      toast.error("Failed to generate roadmap. Please try again.");
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <form onSubmit={handleSubmit} className="flex gap-2">
        <Input
          placeholder="e.g., Show me steps to become a CTO in 5 years"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          className="flex-1"
        />
        <Button type="submit" disabled={isLoading}>
          {isLoading ? "Generating..." : <Search className="mr-2" />}
          {isLoading ? "" : "Generate"}
        </Button>
      </form>

      {roadmap && (
        <div className="mt-6 space-y-4">
          <h3 className="text-xl font-bold">{roadmap.title}</h3>
          <div className="relative pl-8">
            {roadmap.steps.map((step, index) => (
              <div key={index} className="mb-8 relative">
                <div className="absolute left-0 -translate-x-[21px] w-10 h-10 rounded-full bg-primary flex items-center justify-center text-white font-bold">
                  {step.year}
                </div>
                <div className="absolute left-0 -translate-x-[17px] top-10 h-full w-[2px] bg-border">
                  {index !== roadmap.steps.length - 1 && <div className="h-full"></div>}
                </div>
                <div className="pl-4 pb-2">
                  <h4 className="text-lg font-semibold">{step.title}</h4>
                  <p className="text-muted-foreground mt-1">{step.description}</p>
                  <div className="mt-2 flex flex-wrap gap-2">
                    {step.skills.map((skill, skillIndex) => (
                      <span 
                        key={skillIndex}
                        className="px-2 py-1 bg-secondary text-secondary-foreground text-xs rounded-full"
                      >
                        {skill}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default CareerPathPredictor;
